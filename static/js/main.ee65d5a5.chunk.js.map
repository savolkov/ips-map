{"version":3,"sources":["components/Textbox/Textbox.tsx","components/ControlPanel/ControlPanel.tsx","components/IPsMap/IPsMap.tsx","components/SpeechRecognition/SpeechRecognition.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Textbox","props","state","value","handleChange","bind","event","cbFromParent","this","target","setState","className","placeholder","type","onChange","React","Component","ControlPanel","alertMessage","getChildValue","textBoxValue","submitBtnClick","fetch","then","response","text","txt","console","log","obj","JSON","parse","places","catch","err","clearBtnClick","onClick","IPsMap","mapRef","groupRef","controlPanelResultsHandler","results","markers","length","map","current","leafletElement","group","fitBounds","getBounds","createRef","Map","center","lat","lng","zoom","ref","TileLayer","url","attribution","FeatureGroup","m","idx","Marker","key","position","coords","Popup","SpeechRecognition","useState","endpoint","keyState","setKeyState","fileInput","persist","prevState","files","file","speechConfig","sdk","fromSubscription","audioConfig","fromWavFileInput","recognizeOnceAsync","result","reason","ResultReason","RecognizedSpeech","NoMatch","Canceled","cancellation","CancellationDetails","fromResult","CancellationReason","Error","ErrorCode","errorDetails","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ee65d5a5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Textbox.css\";\n\ntype TextBoxState = {\n  value: string;\n};\n\ntype TextboxProps = {\n  cbFromParent: any;\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Textbox extends React.Component<TextboxProps, TextBoxState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event: any) {\n    const { cbFromParent } = this.props;\n    if (cbFromParent) cbFromParent(event.target.value);\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"input-field col s12\">\n        <input\n          placeholder=\"Wiki page URL\"\n          className=\"textbox\"\n          type=\"text\"\n          value={value}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Textbox;\n","import React from \"react\";\nimport \"./ControlPanel.css\";\nimport Textbox from \"../Textbox/Textbox\";\n\ntype controlPanelState = {\n  textBoxValue: string;\n};\n\ntype controlPanelProps = {\n  cbFromParent: any;\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass ControlPanel extends React.Component<\n  controlPanelProps,\n  controlPanelState\n> {\n  alertMessage: string;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { textBoxValue: \"\" };\n    this.alertMessage = \"\";\n  }\n\n  getChildValue = (value: any) => {\n    this.setState({\n      textBoxValue: value\n    });\n  };\n\n  submitBtnClick = () => {\n    const { cbFromParent } = this.props;\n\n    const { textBoxValue } = this.state;\n    if (!textBoxValue) return;\n\n    if (cbFromParent) cbFromParent([]);\n\n    fetch(`https://whispering-sea-82070.herokuapp.com?url=${textBoxValue}`)\n      .then(response => response.text())\n      .then(txt => {\n        console.log(txt);\n        const obj = JSON.parse(txt);\n        if (obj && cbFromParent) {\n          this.alertMessage = \"\";\n          const places = obj.places ? obj.places : [];\n          cbFromParent(places);\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertMessage =\n          \"Error handling request. Try once again or try another page.\";\n      });\n    //   .then(async (res: Response) => {\n    //   if (res && res.body && cbFromParent) {\n    //     this.alertMessage = '';\n    //     const objResponse = await res.json();\n    //     const places = objResponse.places ? objResponse.places : [];\n    //     cbFromParent(places);\n    //   }\n    // })\n    //   .catch((err) => {\n    //     console.log(err);\n    //     this.alertMessage = 'Error handling request. Try once again or try another page.';\n    //   });\n  };\n\n  clearBtnClick = () => {\n    const { cbFromParent } = this.props;\n    if (cbFromParent) cbFromParent([]);\n  };\n\n  render() {\n    return (\n      <div className=\"controlPanel\">\n        <Textbox cbFromParent={this.getChildValue} />\n        <div className=\"controlPanel__buttons\">\n          <button\n            type=\"button\"\n            onClick={this.submitBtnClick}\n            className=\"controlPanel__tb waves-effect waves-light btn\"\n          >\n            Submit\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.clearBtnClick}\n            className=\"controlPanel__tb waves-effect waves-light btn red\"\n          >\n            Clear all\n          </button>\n        </div>\n        <div>\n          <p>{this.alertMessage}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ControlPanel;\n","import React from 'react';\nimport {\n  FeatureGroup,\n  Map,\n  Marker,\n  Popup,\n  TileLayer,\n} from 'react-leaflet';\nimport './IPsMap.css';\nimport ControlPanel from '../ControlPanel/ControlPanel';\n\ntype IPsMapState = {\n  markers: any;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IPsMap extends React.Component<{}, IPsMapState> {\n  mapRef: any;\n\n  groupRef: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { markers: [] };\n    this.mapRef = React.createRef();\n    this.groupRef = React.createRef();\n  }\n\n  controlPanelResultsHandler = (results: any) => {\n    this.setState({ markers: results }, () => {\n      if (results.length === 0) return;\n      const map = this.mapRef.current.leafletElement; // get native Map instance\n      const group = this.groupRef.current.leafletElement; // get native featureGroup instance\n      map.fitBounds(group.getBounds());\n    });\n  };\n\n  render(): React.ReactElement<any, any> {\n    const { markers } = this.state;\n    const center = { lat: 30, lng: 0 }\n    return (\n      <div className=\"IPsMap\">\n        <ControlPanel\n          cbFromParent={this.controlPanelResultsHandler}\n        />\n        <Map center={center} zoom={1} ref={this.mapRef}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n          />\n          <FeatureGroup ref={this.groupRef}>\n            {markers.map((m: any, idx: string) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Marker key={`marker-${idx}`} position={m.coords}>\n                <Popup>\n                  <span>{m.text}</span>\n                </Popup>\n              </Marker>\n            ))}\n          </FeatureGroup>\n        </Map>\n      </div>\n\n    );\n  }\n}\n\nexport default IPsMap;\n","import React, { ChangeEvent, useState } from 'react';\nimport * as sdk from 'microsoft-cognitiveservices-speech-sdk';\nimport './SpeechRecognition.css';\nimport { CancellationDetails, CancellationReason, ResultReason } from 'microsoft-cognitiveservices-speech-sdk';\n\ntype KeyStateType = {\n    key: string;\n    endpoint: string;\n}\n\nexport default function SpeechRecognition() {\n  const [keyState, setKeyState] = useState<KeyStateType>({ key: '', endpoint: '' });\n\n  const fileInput = React.createRef<HTMLInputElement>();\n\n  const handleKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setKeyState((prevState) => ({ ...prevState, key: event.target.value }));\n  };\n  const handleUrlChange = (event: ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setKeyState((prevState) => ({ ...prevState, endpoint: event.target.value }));\n  };\n\n  const handleSubmitClick = () => {\n    if (!fileInput.current?.files || fileInput.current?.files.length === 0) return;\n    const file = fileInput.current.files[0];\n    const speechConfig = sdk.SpeechConfig.fromSubscription(keyState.endpoint, keyState.key);\n    const audioConfig = sdk.AudioConfig.fromWavFileInput(file);\n    const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n\n    recognizer.recognizeOnceAsync((result) => {\n      switch (result.reason) {\n        case ResultReason.RecognizedSpeech:\n          console.log(`RECOGNIZED: Text=${result.text}`);\n          break;\n        case ResultReason.NoMatch:\n          console.log('NOMATCH: Speech could not be recognized.');\n          break;\n        case ResultReason.Canceled:\n          const cancellation = CancellationDetails.fromResult(result);\n          console.log(`CANCELED: Reason=${cancellation.reason}`);\n\n          if (cancellation.reason === CancellationReason.Error) {\n            console.log(`CANCELED: ErrorCode=${cancellation.ErrorCode}`);\n            console.log(`CANCELED: ErrorDetails=${cancellation.errorDetails}`);\n            console.log('CANCELED: Did you update the subscription info?');\n          }\n          break;\n      }\n    });\n  };\n  return (\n    <div>\n      Key:\n      <input type=\"text\" className=\"srText\" value={keyState.key} onChange={handleKeyChange} />\n      URL:\n      <input type=\"text\" className=\"srText\" value={keyState.endpoint} onChange={handleUrlChange} />\n      <input type=\"file\" ref={fileInput} />\n      <button\n        type=\"button\"\n        onClick={handleSubmitClick}\n      >\n        Submit\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport IPsMap from './components/IPsMap/IPsMap';\nimport SpeechRecognition from './components/SpeechRecognition/SpeechRecognition';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>Find Wiki editors by IP!</h3>\n      <IPsMap />\n      <SpeechRecognition />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || 'localhost',\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}